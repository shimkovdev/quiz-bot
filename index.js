require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { google } = require('googleapis');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets —á–µ—Ä–µ–∑ JWT
const jwtClient = new google.auth.JWT(
  process.env.GOOGLE_CLIENT_EMAIL,
  null,
  process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
  ['https://www.googleapis.com/auth/spreadsheets']
);
const sheetsApi = google.sheets({ version: 'v4', auth: jwtClient });

async function authorize() {
  await jwtClient.authorize();
}

function shuffle(array) {
  return array
    .map(value => ({ value, sort: Math.random() }))
    .sort((a, b) => a.sort - b.sort)
    .map(({ value }) => value);
}

async function loadQuiz() {
  const { data } = await sheetsApi.spreadsheets.values.get({
    spreadsheetId: process.env.GOOGLE_SHEET_ID,
    range: '–í–æ–ø—Ä–æ—Å—ã!A1:Z1000',
  });

  const rows = data.values || [];
  if (rows.length < 3) throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ "–í–æ–ø—Ä–æ—Å—ã"');

  const questions = rows[0];     // —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
  const corrects = rows[1];      // —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
  const optionsRows = rows.slice(2); // —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏

  const quiz = questions.map((q, i) => {
    const allOptions = optionsRows.map(row => row[i]).filter(Boolean);
    const correct = corrects[i];

    const shuffled = shuffle(allOptions);
    return {
      text: q,
      correct: correct,
      options: shuffled
    };
  });

  return shuffle(quiz); // –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
}


// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function saveResults(username, answers, scoreStr) {
  await sheetsApi.spreadsheets.values.append({
    spreadsheetId: process.env.GOOGLE_SHEET_ID,
    range: '–û–ø—Ä–æ—Å',
    valueInputOption: 'RAW',
    insertDataOption: 'INSERT_ROWS',
    requestBody: { values: [[username, ...answers, scoreStr]] },
  });
}

const sessions = {};

bot.start(ctx => {
  ctx.reply('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∫–æ –î–Ω—é –∫–∞–¥—Ä–æ–≤–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ HR!', Markup.inlineKeyboard([
    Markup.button.callback('–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å', 'START')
  ]));
});

bot.action('START', async ctx => {
  try {
    const quiz = await loadQuiz();
    sessions[ctx.from.id] = { quiz, index: 0, answers: [] };
    sendQuestion(ctx);
  } catch (err) {
    console.error(err);
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –∏–ª–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
function sendQuestion(ctx) {
  const s = sessions[ctx.from.id];
  const qObj = s.quiz[s.index];

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–∫–∞–∂–¥–∞—è ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
  const keyboard = qObj.options.map(opt => [ opt ]);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤–º–µ—Å—Ç–µ —Å Reply Keyboard
  ctx.reply(
    qObj.text,
    Markup.keyboard(keyboard)
      .oneTime()        // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
      .resize()         // –ø–æ–¥–≥–æ–Ω–∏—Ç —Ä–∞–∑–º–µ—Ä
  );
}

// –í–º–µ—Å—Ç–æ bot.action ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.on('text')
// (–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start)
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const s = sessions[userId];
  if (!s) return;                      // –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî –∏–≥–Ω–æ—Ä

  const answer = ctx.message.text;     // –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
  s.answers[s.index] = answer;
  s.index++;

  // –£–±–∏—Ä–∞–µ–º Reply Keyboard
  await ctx.reply('–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç', Markup.removeKeyboard());

  if (s.index < s.quiz.length) {
    return sendQuestion(ctx);
  }

  // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  const results = s.quiz.map((q, i) => ({
    question: q.text,
    correct: q.correct,
    answer: s.answers[i] || ''
  }));
  const score = results.filter(r => r.answer === r.correct).length;
  const summary = results.map(r =>
    `‚ùì ${r.question}\n‚úÖ ${r.correct}\nüìù ${r.answer}`
  ).join('\n\n') + `\n\nüéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${score}/${results.length}`;

  await ctx.reply(summary);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
  const username = ctx.from.username || userId;
  await saveResults(username, s.answers, `${score}/${results.length}`);
  await bot.telegram.sendMessage(
    process.env.RESULTS_CHAT_ID,
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å: ${score}/${results.length}`
  );
  delete sessions[userId];
});

(async () => {
  try {
    await authorize();
    await bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', err);
  }
})();

