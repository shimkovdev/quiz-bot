require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { GoogleSpreadsheet } = require('google-spreadsheet');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID);

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function authorizeGoogleSheet() {
  await doc.useServiceAccountAuth({
    client_email: process.env.GOOGLE_CLIENT_EMAIL,
    private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'), // –î–≤–∞–∂–¥—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ \n –∏–∑ .env
  });
  await doc.loadInfo();
}

async function loadQuiz() {
  const sheetQ = doc.sheetsByTitle['–í–æ–ø—Ä–æ—Å—ã'];
  const rows = await sheetQ.getRows();

  const header = sheetQ.headerValues;
  const correctRow = rows[0];
  const optionRows = rows.slice(1);

  return header.map((q, i) => ({
    text: q,
    options: optionRows.map(r => r._rawData[i]).filter(o => o),
    correct: correctRow._rawData[i],
  }));
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const sessions = {};

bot.start(ctx => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å?', Markup.inlineKeyboard([
    Markup.button.callback('–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å', 'START')
  ]));
});

bot.action('START', async ctx => {
  try {
    const quiz = await loadQuiz();
    sessions[ctx.from.id] = { quiz, index: 0, answers: [] };
    sendQuestion(ctx);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:', err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

function sendQuestion(ctx) {
  const session = sessions[ctx.from.id];
  const q = session.quiz[session.index];
  ctx.editMessageText(q.text, Markup.inlineKeyboard(
    q.options.map(o => Markup.button.callback(o, `ANS_${o}`))
  ));
}

bot.action(/ANS_(.+)/, async ctx => {
  const id = ctx.from.id;
  const session = sessions[id];
  session.answers.push(ctx.match[1]);
  session.index++;

  if (session.index < session.quiz.length) {
    return sendQuestion(ctx);
  }

  // –ò—Ç–æ–≥–∏
  const results = session.quiz.map((q, i) => ({
    question: q.text,
    correct: q.correct,
    answer: session.answers[i]
  }));
  const score = results.filter(r => r.answer === r.correct).length;

  const summary = results.map(r =>
    `‚ùì ${r.question}\n‚úÖ ${r.correct}\nüìù ${r.answer}`
  ).join('\n\n') +
    `\n\nüéâ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ ${score} –∏–∑ ${results.length}`;

  await ctx.editMessageText(summary);

  try {
    const sheetR = doc.sheetsByTitle['–û–ø—Ä–æ—Å'];
    await sheetR.addRow([
      ctx.from.username || id,
      ...session.answers,
      `${score}/${results.length}`
    ]);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', err);
  }

  await bot.telegram.sendMessage(
    process.env.RESULTS_CHAT_ID,
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å: ${score}/${results.length}`
  );

  delete sessions[id];
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
(async () => {
  try {
    await authorizeGoogleSheet();
    console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets —É—Å–ø–µ—à–Ω–∞');
    bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', err);
  }
})();

