require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { google } = require('googleapis');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets —á–µ—Ä–µ–∑ JWT
const jwtClient = new google.auth.JWT(
  process.env.GOOGLE_CLIENT_EMAIL,
  null,
  process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
  ['https://www.googleapis.com/auth/spreadsheets']
);
const sheetsApi = google.sheets({ version: 'v4', auth: jwtClient });

async function authorize() {
  await jwtClient.authorize();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async function loadQuiz() {
  const { data } = await sheetsApi.spreadsheets.values.get({
    spreadsheetId: process.env.GOOGLE_SHEET_ID,
    range: '–í–æ–ø—Ä–æ—Å—ã!A1:Z1000',
  });
  const rows = data.values || [];
  if (rows.length < 2) throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ "–í–æ–ø—Ä–æ—Å—ã"');

  const header = rows[0];
  const corrects = rows[1];
  const optionsRows = rows.slice(2);

  return header.map((q, i) => ({
    text: q,
    correct: corrects[i] || '',
    options: optionsRows.map(r => r[i]).filter(Boolean),
  }));
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function saveResults(username, answers, scoreStr) {
  await sheetsApi.spreadsheets.values.append({
    spreadsheetId: process.env.GOOGLE_SHEET_ID,
    range: '–û–ø—Ä–æ—Å',
    valueInputOption: 'RAW',
    insertDataOption: 'INSERT_ROWS',
    requestBody: { values: [[username, ...answers, scoreStr]] },
  });
}

const sessions = {};

bot.start(ctx => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å?', Markup.inlineKeyboard([
    Markup.button.callback('–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å', 'START')
  ]));
});

bot.action('START', async ctx => {
  try {
    const quiz = await loadQuiz();
    sessions[ctx.from.id] = { quiz, index: 0, answers: [] };
    sendQuestion(ctx);
  } catch (err) {
    console.error(err);
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

function sendQuestion(ctx) {
  const s = sessions[ctx.from.id];
  const qObj = s.quiz[s.index];
  // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
  s.currentOptions = qObj.options;
  const buttons = qObj.options.map((opt, idx) =>
    Markup.button.callback(opt, `ANS_${s.index}_${idx}`)
  );
  ctx.editMessageText(qObj.text, Markup.inlineKeyboard(buttons));
}

bot.action(/ANS_(\d+)_(\d+)/, async ctx => {
  const [ , qIdxStr, optIdxStr ] = ctx.match;
  const qIdx = Number(qIdxStr), optIdx = Number(optIdxStr);
  const s = sessions[ctx.from.id];
  // –î–æ—Å—Ç–∞—ë–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
  s.answers[qIdx] = s.currentOptions[optIdx];
  s.index++;

  if (s.index < s.quiz.length) {
    return sendQuestion(ctx);
  }

  // –ò—Ç–æ–≥–∏
  const results = s.quiz.map((q, i) => ({
    question: q.text,
    correct: q.correct,
    answer: s.answers[i] || ''
  }));
  const score = results.filter(r => r.answer === r.correct).length;
  const summary = results.map(r =>
    `‚ùì ${r.question}\n‚úÖ ${r.correct}\nüìù ${r.answer}`
  ).join('\n\n') + `\n\nüéâ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ ${score}/${results.length}`;

  await ctx.editMessageText(summary);

  const username = ctx.from.username || ctx.from.id;
  await saveResults(username, s.answers, `${score}/${results.length}`);
  await bot.telegram.sendMessage(
    process.env.RESULTS_CHAT_ID,
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å: ${score}/${results.length}`
  );

  delete sessions[ctx.from.id];
});

(async () => {
  try {
    await authorize();
    await bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', err);
  }
})();

