require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { google } = require('googleapis');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets —á–µ—Ä–µ–∑ JWT
const jwtClient = new google.auth.JWT(
  process.env.GOOGLE_CLIENT_EMAIL,
  null,
  // private_key –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ \\n, –∞ –∑–¥–µ—Å—å –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
  process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
  ['https://www.googleapis.com/auth/spreadsheets']
);
const sheetsApi = google.sheets({ version: 'v4', auth: jwtClient });

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞
async function authorize() {
  await jwtClient.authorize();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ "–í–æ–ø—Ä–æ—Å—ã"
async function loadQuiz() {
  const { data } = await sheetsApi.spreadsheets.values.get({
    spreadsheetId: process.env.GOOGLE_SHEET_ID,
    range: '–í–æ–ø—Ä–æ—Å—ã!A1:Z1000',  // –æ—Ö–≤–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
  });
  const rows = data.values || [];
  if (rows.length < 2) throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ "–í–æ–ø—Ä–æ—Å—ã"');

  const header = rows[0];       // –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Ç–µ–∫—Å—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
  const corrects = rows[1];     // –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  const optionsRows = rows.slice(2);  // —Å —Ç—Ä–µ—Ç—å–µ–π ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç—ã

  return header.map((q, i) => ({
    text: q,
    correct: corrects[i] || '',
    options: optionsRows.map(r => r[i]).filter(o => o),
  }));
}

// –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ª–∏—Å—Ç "–û–ø—Ä–æ—Å"
async function saveResults(username, answers, scoreStr) {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø–æ–¥ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç
  await sheetsApi.spreadsheets.values.append({
    spreadsheetId: process.env.GOOGLE_SHEET_ID,
    range: '–û–ø—Ä–æ—Å',
    valueInputOption: 'RAW',
    insertDataOption: 'INSERT_ROWS',
    requestBody: {
      values: [
        [ username, ...answers, scoreStr ]
      ]
    }
  });
}

// –ë–æ—Ç
const sessions = {};

bot.start(ctx => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å?', Markup.inlineKeyboard([
    Markup.button.callback('–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å', 'START')
  ]));
});

bot.action('START', async ctx => {
  try {
    const quiz = await loadQuiz();
    sessions[ctx.from.id] = { quiz, index: 0, answers: [] };
    sendQuestion(ctx);
  } catch (err) {
    console.error(err);
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

function sendQuestion(ctx) {
  const s = sessions[ctx.from.id];
  const q = s.quiz[s.index];
  ctx.editMessageText(q.text, Markup.inlineKeyboard(
    q.options.map(o => Markup.button.callback(o, `ANS_${s.index}_${o}`))
  ));
}

bot.action(/ANS_(\d+)_(.+)/, async ctx => {
  const [ , idxStr, answer ] = ctx.match;
  const userId = ctx.from.id;
  const s = sessions[userId];
  const idx = parseInt(idxStr, 10);
  s.answers[idx] = answer;
  s.index++;

  if (s.index < s.quiz.length) {
    return sendQuestion(ctx);
  }

  // –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
  const results = s.quiz.map((q, i) => ({
    question: q.text,
    correct: q.correct,
    answer: s.answers[i] || ''
  }));
  const score = results.filter(r => r.answer === r.correct).length;
  const summary = results.map(r =>
    `‚ùì ${r.question}\n‚úÖ ${r.correct}\nüìù ${r.answer}`
  ).join('\n\n') + `\n\nüéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${score}/${results.length}`;

  await ctx.editMessageText(summary);
  const username = ctx.from.username || ctx.from.id;
  await saveResults(username, s.answers, `${score}/${results.length}`);
  await bot.telegram.sendMessage(
    process.env.RESULTS_CHAT_ID,
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å: ${score}/${results.length}`
  );
  delete sessions[userId];
});

// –ó–∞–ø—É—Å–∫
(async () => {
  try {
    await authorize();
    await bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', err);
  }
})();

